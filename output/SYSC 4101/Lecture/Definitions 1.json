{
    "metadata": {
        "overview": "This lecture introduces the concepts of faults, errors, and failures in software systems, emphasizing their importance in understanding and testing software. It then delves into the concepts of observability and controllability, explaining how they relate to the three key concepts and how they influence testing.",
        "topics": [
            "Fault, Error, and Failure",
            "Reachability, Infection, and Propagation",
            "Observability and Controllability",
            "Test Scaffolding / Test Harness",
            "Test Driver",
            "Test Stub",
            "Test Oracle",
            "Putting Things Together",
            "A Simple Example"
        ],
        "format": "Lecture",
        "date": "2024-09-12T00:00:00",
        "course": "SYSC 4101",
        "title": "Definitions 1",
        "path": "input/SYSC4101-5105_Definitions_PI.pdf"
    },
    "notes": "## SYSC4101 / SYSC5105: Definitions - Part I\n\n### What are we looking for?\n\n- **Fault:** A defect in a system.  \n    - Humans commit faults.\n    - Example: A faulty statement.\n- **Error:** An unexpected state of the system at runtime due to the activation of a fault. \n    - Example: An erroneous state.\n- **Failure:** The delivered service deviates from what the system is intended for.\n\n**Important:** The word \"bug\" is not part of the vocabulary in SYSC4101.\n\n### Fault, Error, and Failure\n\n- **Fault → Error → Failure**\n\n- **Three conditions necessary for a failure to be observed:**\n    - **Reachability:** The location(s) in the program that contain the fault must be reached.\n    - **Infection:** The state of the program must be incorrect.\n    - **Propagation:** The infected state must propagate to cause some output of the program to be observed as incorrect.\n\n**Important:** All three conditions are necessary for a failure to be observed. Reaching the fault or infecting the state alone is not sufficient.\n\n### Observability vs. Controllability\n\n- **Software Observability:** How easy it is to observe the behavior of a program in terms of its outputs, effects on the environment, and other hardware and software components.\n    - Software that affects hardware devices, databases, or remote files have low observability.\n    - **Observability relates to Propagation.**\n\n- **Software Controllability:** How easy it is to provide a program with the needed inputs in terms of values, operations, and behaviors.\n    - Easy to control software with inputs from keyboards.\n    - Inputs from hardware sensors or distributed software is harder.\n    - Data abstraction reduces controllability and observability.\n    - **Controllability relates to Reachability and Infection.**\n\n### Putting it Together\n\n- **Control Flow Graph:** A visual representation of the program's execution path, highlighting the relationship between reachability, propagation, and observability.\n\n- **Test Scaffolding / Test Harness:** Infrastructure (software and/or hardware) used to execute test cases.\n\n    - **Test Driver:** A software component or test tool that replaces a component that takes care of the control and/or the calling of a software component.\n        - Executes a test case (one execution of the system under test with input values) or a test suite/set (a set of test cases).\n\n    - **Test Stub (a.k.a., mock):** A skeletal or special-purpose implementation of a software module used to develop or test a component that calls the stub or otherwise depends on it. It replaces a called component.\n        - Simulates a piece of code not yet ready.\n\n    - **Test Oracle:** Assists in deciding whether a test outcome is successful or not.\n        - Outcome (verdict) of the oracle evaluation: pass / fail.\n        - **Two important tasks:**\n            1. Comparing the actual output against the expected output.\n            2. Deciding what the expected output is, given the test inputs of a test case.\n\n**Important:** Stubs and drivers enable components to be isolated from the rest of the system for testing purposes.\n\n### A Simple Example\n\n- **Scenario:** Testing a function `root()` that calculates the roots of a quadratic equation, where the function `mySquareRoot()` is not yet available.\n\n- **Solution:**\n    - **Stub:** Create a simple simulation of `mySquareRoot()` called `mySquareRoot-Stub.c`.\n    - **Driver:** Create a program `root-UnitTestWithStub.c` that uses the stub and executes test cases.\n    - **Oracle:** The driver compares the actual outputs with the expected outputs.\n\n### Automated Test Infrastructure\n\n- **Familiar Tools:** JUnit, Google's C++ xUnit, etc.\n\n- **Less Familiar Tools:** TTCN-3, organization-specific set-ups.\n\n**Important:** While the syntax may change, the fundamental principles of testing remain the same. You still need to decide what inputs/outputs to choose for your tests.\n\n**Key Takeaways:**\n\n- Understanding the concepts of fault, error, and failure is crucial for effective software testing.\n- Observability and controllability are essential for designing effective test cases.\n- Test scaffolding and test harnesses provide the infrastructure for executing and evaluating tests.\n- Automated test infrastructure simplifies the testing process and improves efficiency.",
    "review": [
        {
            "answer": "A fault is a defect in a system, often caused by human error, such as a faulty statement. An error occurs at runtime when a fault is activated, leading to an unexpected state. A failure occurs when the system's delivered service deviates from its intended behavior.",
            "question": "What are the key differences between a fault, an error, and a failure in software systems?"
        },
        {
            "answer": "Reachability refers to whether the code containing the fault can be executed. Infection means the program's state is incorrect due to the fault. Propagation indicates that the incorrect state affects the system's output, making the failure observable.",
            "question": "Explain the three conditions necessary for a failure to be observed in a software system."
        },
        {
            "answer": "Observability measures how easily we can understand a program's behavior based on its outputs and effects on the environment. Controllability refers to how easily we can provide the program with the necessary inputs to achieve desired outcomes.",
            "question": "Define software observability and controllability, and explain their relationship to the three conditions for failure."
        },
        {
            "answer": "A test driver is a software component that executes test cases by providing inputs and calling the program under test. A test stub is a simplified implementation of a component that simulates the behavior of a real component, allowing for isolated testing.",
            "question": "Describe the roles of a test driver and a test stub in software testing."
        },
        {
            "answer": "A test oracle determines whether a test case is successful or not by comparing the actual output of the program with the expected output. It can be implemented in software or by human judgment.",
            "question": "What is the purpose of a test oracle in software testing?"
        },
        {
            "answer": "The test scaffolding or test harness is the infrastructure used to execute test cases. It includes the test driver, test stubs, and the test oracle, which work together to provide a controlled environment for testing.",
            "question": "Explain the concept of test scaffolding or test harness in software testing."
        },
        {
            "answer": "The syntax of test frameworks may differ, but the fundamental principles of defining inputs, outputs, and expected results remain the same. We still need to carefully choose the inputs and outputs to ensure thorough testing.",
            "question": "What aspects of software testing remain constant across different automated test frameworks, despite variations in syntax?"
        }
    ],
    "keywords": [
        {
            "definition": "A defect in a system that can lead to errors.",
            "term": "Fault"
        },
        {
            "definition": "A special-purpose implementation of a software module used to develop or test a component that calls the stub.",
            "term": "Stub"
        },
        {
            "definition": "A software component or test tool that replaces a component that takes care of the control and/or the calling of a software component.",
            "term": "Test Driver"
        },
        {
            "definition": "A component that assists in deciding whether a test outcome is successful or not by comparing the actual output against the expected output.",
            "term": "Test Oracle"
        },
        {
            "definition": "The state of the program must be incorrect due to the activation of a fault.",
            "term": "Infection"
        },
        {
            "definition": "The location(s) in the program that contain the fault must be reached.",
            "term": "Reachability"
        },
        {
            "definition": "The infected state must propagate to cause some output of the program to be observed as incorrect.",
            "term": "Propagation"
        },
        {
            "definition": "How easy it is to observe the behavior of a program in terms of its outputs, effects on the environment, and other hardware and software components.",
            "term": "Software Observability"
        },
        {
            "definition": "How easy it is to provide a program with the needed inputs, in terms of values, operations, and behaviors.",
            "term": "Software Controllability"
        },
        {
            "definition": "Infrastructure (software and/or hardware) we put in place to execute test cases.",
            "term": "Test Scaffolding"
        },
        {
            "definition": "A runtime event that occurs when some part of the system enters an unexpected state due to the activation of a fault.",
            "term": "Error"
        },
        {
            "definition": "A failure of the system occurs when the delivered service deviates from what the system is intended for.",
            "term": "Failure"
        }
    ],
    "practice": {
        "long": [
            {
                "answer": "Observability is the ease with which we can understand the behavior of a program based on its outputs and interactions with the environment. Controllability, on the other hand, refers to the ease of providing a program with the necessary inputs to achieve desired outcomes. Both are crucial for effective testing, as they allow us to understand how the program behaves and to manipulate it to explore different scenarios.",
                "question": "Explain the concepts of observability and controllability in software testing and their significance."
            },
            {
                "answer": "A test driver is a software component or tool that acts as a surrogate for the caller of the component under test. It controls the execution of the test cases and provides the necessary inputs to the component. A test stub, in contrast, replaces a called component, providing a simplified or simulated implementation to isolate the component under test from its dependencies.",
                "question": "Describe the roles of a test driver and a test stub in software testing. How do they contribute to the testing process?"
            }
        ],
        "multiple": [
            {
                "answer": "Reachability",
                "explanation": "Reachability refers to the ability to reach the faulty code location during test execution.",
                "options": [
                    "Reachability",
                    "Infection",
                    "Propagation",
                    "Observability"
                ],
                "question": "Which of the following concepts refers to the ability to execute the code containing a fault during testing?"
            },
            {
                "answer": "A test oracle determines whether a test case has passed or failed by comparing the actual output of the program with the expected output.",
                "explanation": "The test oracle acts as a judge, comparing the actual output with the expected output to determine the success or failure of a test case.",
                "options": [
                    "A test oracle determines whether a test case has passed or failed by comparing the actual output of the program with the expected output.",
                    "A test driver executes a test case by providing inputs to the program under test.",
                    "A test stub simulates the behavior of a called component, allowing for isolated testing.",
                    "A test harness is a framework that provides infrastructure for executing test cases, including drivers, stubs, and oracles."
                ],
                "question": "What is the primary function of a test oracle in software testing?"
            },
            {
                "answer": "To isolate the component under test from its dependencies, simplifying testing and debugging.",
                "explanation": "Stubs are used to replace dependent components, allowing for focused testing of the component under test without the complexities of interacting with real dependencies.",
                "options": [
                    "To isolate the component under test from its dependencies, simplifying testing and debugging.",
                    "To provide a controlled environment for executing test cases.",
                    "To generate test cases automatically based on the code structure.",
                    "To analyze the code coverage achieved by the test suite."
                ],
                "question": "What is the main purpose of using test stubs in software testing?"
            },
            {
                "answer": "It is not sufficient to reach the fault; there may not be any infection, and the delivered service may not be affected.",
                "explanation": "Reaching the faulty code location alone does not guarantee a failure. The faulty state must also be triggered (infection) and propagate to affect the delivered service.",
                "options": [
                    "It is not sufficient to reach the fault; there may not be any infection, and the delivered service may not be affected.",
                    "It is not sufficient to infect the state; the delivered service may not be affected.",
                    "It is not sufficient to reach the fault; the delivered service may not be affected.",
                    "It is not sufficient to infect the state; there may not be any infection, and the delivered service may not be affected."
                ],
                "question": "Which of the following statements accurately describes the conditions necessary for a failure to be observed in software testing?"
            },
            {
                "answer": "It is a defect in a system.",
                "explanation": "A fault represents a flaw or error in the code that can potentially lead to incorrect behavior or failures.",
                "options": [
                    "It is a defect in a system.",
                    "It occurs at runtime when some part of the system enters an unexpected state.",
                    "It occurs when the delivered service deviates from what the system is intended for.",
                    "It is a synonym for the term \"bug\" in software testing."
                ],
                "question": "What is the definition of a \"fault\" in the context of software testing?"
            }
        ],
        "short": [
            {
                "answer": "A test harness provides the infrastructure for executing test cases, including the test driver, test stubs, and test oracle. It acts as a framework that orchestrates the testing process and facilitates the interaction between different components.",
                "question": "What is a test harness in software testing, and what is its role?"
            },
            {
                "answer": "Test-driven development (TDD) is a software development methodology where test cases are written before the actual code is implemented. This approach helps ensure that the code meets the specified requirements and facilitates a more iterative and focused development process.",
                "question": "Briefly describe the concept of test-driven development (TDD)."
            },
            {
                "answer": "Automated testing involves using tools and scripts to execute test cases and analyze the results without manual intervention. This approach offers several benefits, including increased efficiency, reduced human error, and the ability to run tests frequently throughout the development cycle.",
                "question": "What is automated testing, and what are its advantages?"
            }
        ]
    }
}