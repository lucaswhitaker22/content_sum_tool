{
    "metadata": {
        "overview": "This lecture focuses on the importance of testing in software development, emphasizing the distinction between verification and validation. It delves into various techniques for both static and dynamic testing, highlighting their strengths and limitations.",
        "topics": [
            "Verification vs. Validation",
            "Definitions (Verification vs. Validation)",
            "Definitions (V&V Techniques)",
            "Symbolic Execution",
            "Program Slicing",
            "Model Checking",
            "Abstract Interpretation",
            "Inspection",
            "So... we are interested in Faults",
            "Goal of Testing",
            "Remarks",
            "Cost of Testing",
            "Software Bugs - Cost",
            "Software Bugs..."
        ],
        "format": "Lecture",
        "date": "2024-09-10T00:00:00",
        "course": "SYSC 4101",
        "title": "Context",
        "path": "input/SYSC4101-5105_Context.pdf"
    },
    "notes": "# SYSC 4101 / SYSC 5105: Software Verification and Validation\n\n## Context\n\n- **Verification**: The process of evaluating a system or component to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase.\n- **Validation**: The process of evaluating a system or component during or at the end of the development process to determine whether it satisfies specified requirements.\n- **Testing**: A dynamic technique that involves executing the code and supplying inputs to the system.\n\n**Why do we test?**\n\n- To ensure the product is built correctly (verification).\n- To ensure the right product is built (validation).\n- To demonstrate the software can be depended upon (dependability).\n\n**What should we do during testing?**\n\n- Identify and discard irrelevant statements to build an executable subprogram (program slicing).\n- Verify properties of the system using models (model checking).\n- Make a sound approximation of the semantics of a program (abstract interpretation).\n- Systematically verify software artifacts to find defects (inspection).\n\n## Definitions (Verification vs. Validation)\n\n- **Verification** focuses on internal consistency, correctness, and compliance with design specifications. It involves static testing methods like reviews, inspections, walkthroughs, and static analysis.\n- **Validation** focuses on meeting user needs and intended use. It involves dynamic testing methods like unit testing, integration testing, system testing, and user acceptance testing (UAT).\n\n**Example:**\n\nConsider the waterfall software development model with three phases: requirements, design, and implementation.\n\n- **Verification** in the **requirements** phase ensures consistency and non-contradiction among requirements.\n- **Verification** in the **design** phase ensures consistency between the design and the requirements.\n- **Validation** in the **design** phase ensures that the design meets the user needs.\n- **Validation** in the **implementation** phase ensures that the implementation meets the design specifications.\n\n## Definitions (V&V Techniques)\n\n- **Dynamic Techniques**: Involve executing the code and supplying inputs to the system.\n    - **Verification Testing (or simply, Testing)**: The most used V&V technique. Inputs are valued (values instead of symbols).\n    - **Symbolic Execution**: Computes an input/output function by replacing variables with symbols.\n- **Static Techniques**: Do not involve program execution.\n    - **Program Slicing**: Builds an executable subprogram by identifying and discarding irrelevant statements.\n    - **Model Checking**: Verifies properties of the system using models (e.g., finite state machines, Petri nets).\n    - **Abstract Interpretation**: Makes a sound approximation of the semantics of a program.\n    - **Inspection**: Systematically verifies software artifacts to find defects.\n\n## Symbolic Execution\n\n- Inputs supplied to the system are symbolic (symbols, not values).\n- Visualizes what is accomplished by a sequence of assignment statements.\n- Computes an input/output function: any value of a variable in a procedure is a function of the procedure parameters.\n\n**Example:**\n\n```\n1. void foo(int x, int y) {\n2.  int t;\n3.  if(x>y)\n4.   t=x+1;\n5.  else\n6.   t=y;\n7.  if(t<=x)\n8.   // do something\n9. }\n```\n\n- Replace `x`, `y`, `t` with symbols `α`, `β`, `γ`, respectively.\n- After line 6:\n    - `α>β => γ=α+1`\n    - `α≤β => γ=β`\n- Line 8 executes if `α>β = γ=a+1 Λ γ≤α` or `α≤β => γ=β Λ γ≤α`.\n- Code can \"do something\" only when `x=y`.\n\n## Program Slicing\n\n- Given a variable and its location in the control flow of the program, build an executable subprogram by identifying and discarding irrelevant statements.\n- Lot's of tool support! Typical compiler task.\n\n**Example:**\n\n```\n1. begin\n2.  read(x,y);\n3.  total := 0.0;\n4.  sum := 0.0;\n5.  if x<=1\n6.   then sum := y;\n7.  else begin\n8.   read(z);\n9.  end;\n10. total := x*y;\n11. write(total,sum);\n12. end;\n```\n\n- **Slice on the value of `z` at statement 12:**\n    ```\n    1. begin\n    2.  read(x,y);\n    3.  if x<=1\n    4.   then\n    5.  else begin\n    6.   read(z);\n    7.  end;\n    8. end;\n    ```\n- **Slice on the value of `x` at statement 9:**\n    ```\n    1. begin\n    2.  read(x,y);\n    3. end;\n    ```\n\n## Model Checking\n\n- Verifying properties of the system using models (e.g., finite state machines, Petri nets).\n- Exhaustively and automatically check whether a model meets a given specification.\n\n**Examples:**\n\n- Verify that a state is always reachable (liveness property) or, on the contrary, never reachable.\n- Verify there is no deadlock.\n- Verify a program necessarily terminates.\n\n## Aside Note - Petri Nets\n\n- Petri nets are a graphical and mathematical modeling tool for representing and analyzing systems with concurrent activities.\n- They consist of places (circles) representing states and transitions (bars) representing events.\n- Tokens represent the current state of the system.\n\n**Example:**\n\n- A Petri net can model a system with two concurrent programs accessing a critical section.\n- The places represent the states of the programs (e.g., waiting, in critical section).\n- The transitions represent the events that can occur (e.g., entering or leaving the critical section).\n- The tokens represent the current state of the programs.\n\n## Model Checking (cont.)\n\n- **The alternating-bit protocol**: Originally designed to transmit information reliably over noisy telephone lines.\n- **Model from 1969 paper**: A note on reliable full-duplex transmission over half-duplex lines.\n\n**Can you tell whether there is an unreachable state?**\n\n- A model checker can!\n- **SPIN** with the **Promela language** (Bell Labs) is a popular model checker.\n\n## Abstract Interpretation\n\n- With abstract interpretation, we make a sound approximation of the semantics of a program.\n- Identify that all execution traces of the program are within bounds.\n    - **Sound**: All execution traces are considered.\n    - **Approximation**: Only traces within bounds are considered.\n- If a property is true on the approximation, then it is true for the program (all its executions).\n\n**Which properties?**\n\n- Out of bounds counters (e.g., in loops), division by zero, ...\n\n**Tool support scales up:**\n\n- 1,000,000 lines of C (Airbus)!\n- C++, Java, Ada support too.\n\n## Inspection\n\n- Techniques aimed at systematically verifying software artifacts with the intent of finding as many defects as possible, as early as possible.\n- Performed by a group of team workers.\n- Faults often become more obvious to team members other than the original author.\n- Works on source code but not only: any software artifact (e.g., requirements, diagrams, tests).\n\n## So... We are Interested in Faults\n\n- We can be interested in faults in very different ways.\n- **Fault Handling**: A general category that encompasses fault avoidance, fault detection, and fault tolerance.\n    - **Fault Avoidance**: Aims to prevent faults from occurring in the first place.\n    - **Fault Detection**: Aims to detect faults as early as possible.\n    - **Fault Tolerance**: Aims to ensure the system continues to operate correctly even in the presence of faults.\n- **Testing**: A dynamic technique that involves executing the code and supplying inputs to the system.\n- **Debugging**: The process of finding and fixing faults in software.\n\n**Focus of SYSC 4101 / SYSC 5105**: Testing and debugging.\n\n## Goal of Testing\n\n- **Goal of Testing**: To demonstrate the software can be depended upon.\n- **Program testing can be used to show the presence of bugs, but never to show their absence.** (E.W. Dijkstra, Turing Award Lecture, 1972)\n- **No absolute certainty can be gained from testing.** Testing is necessarily finite.\n- **Testing should be integrated with other verification activities.** Static and dynamic V&V techniques.\n\n**Main goal**: Demonstrate the software can be depended upon, i.e., sufficient dependability.\n\n**What is considered \"sufficient\" is context dependent!**\n\n- **Example:** A phone app vs. an aircraft auto pilot.\n\n## Remarks\n\n- **No matter how rigorous we are, software is going to be faulty.**\n- **Testing represents a substantial percentage of software development costs and time to market.**\n- **Impossible to test under all operating conditions.** Based on incomplete testing, we must gain confidence that the system has the desired behavior.\n- **Testing large systems is complex.** It requires strategy and technology and is often done in practice.\n\n## Cost of Testing\n\n- **You are going to spend about half of your development budget on testing, whether you want to or not.**\n- **In real-world usage, testing is the main post-design activity.**\n- **Restricting early testing usually increases costs.**\n- **In some organizations, there are more lines of test code than application code!**\n    - **Rule of thumb**: One line of application code => two lines of test code.\n    - **Industry ratio**: Test-LOC / App-LOC can be 2, 3, 4.\n    - **Open source (reverse) ratio**: App-LOC / Test-LOC can be 2, 3, ... 7.\n\n## Software Bugs - Cost\n\n- **\"Impact of Inadequate Software Testing on US Economy\"**: National Institute of Standards and Technology (NIST), a US federal agency.\n    - **Studies**: In the manufacturing and transportation equipment sectors, to assess the cost to the U.S. economy of inadequate software testing infrastructure.\n    - **Results (annual cost)**:\n        - **Estimation**: $5.85 billion.\n        - **Projection to the entire U.S. economy**: $59.5 billion.\n- **Anecdotal evidence**:\n    - **Bug in telecom**: 8-digit dollar cost in compensation.\n    - **Debugging Fault**: $100,000 for one!\n- **Consortium for Information and Software Quality**: Poor software quality in the USA = $2 trillions in 2020.\n\n## Software Bugs...\n\n- **Bug related to the year**: A 104 years old woman received an invitation to a kindergarten (1992).\n- **Interface misuse**: Underground train in London left a station without the driver (1990).\n- **Over budget project**: Failure in an automated luggage system in an airport (1995).\n- **NASA mission to Mars**: Incorrect conversion from imperial to metric leads to loss of Mars satellite (1999).\n- **Ariane 5 Flight 501**: The space rocket was destroyed (1996).\n- **Therac-25**: Radiation therapy and X-ray machine killed several patients (1985-1987).\n\n**Important takeaways:**\n\n- Software verification and validation are crucial for ensuring software quality and dependability.\n- Testing is a fundamental part of software development and can be used to detect faults and improve software quality.\n- Faults can have significant consequences, including financial losses, safety hazards, and reputational damage.\n- It is important to invest in testing and other verification activities to mitigate the risks associated with software faults.",
    "review": [
        {
            "answer": "Verification ensures that the product is built correctly, while validation ensures that the right product is built.",
            "question": "What is the fundamental difference between software verification and validation?"
        },
        {
            "answer": "Verification focuses on internal consistency, correctness, and compliance with specifications, while validation focuses on meeting user needs and intended use.",
            "question": "What are the key areas of focus for verification and validation, respectively?"
        },
        {
            "answer": "Static testing involves analyzing the code without executing it, while dynamic testing involves running the code and observing its behavior.",
            "question": "Explain the difference between static and dynamic testing."
        },
        {
            "answer": "Symbolic execution is a technique that uses symbolic values instead of concrete values to analyze the program's behavior. It helps identify potential errors and understand the program's logic.",
            "question": "What is symbolic execution, and what is its purpose in software testing?"
        },
        {
            "answer": "Model checking is a technique that uses formal models to verify the properties of a system. It exhaustively checks whether the model meets a given specification, ensuring that the system behaves as intended.",
            "question": "Describe model checking and its role in software verification."
        },
        {
            "answer": "Program slicing is a technique that extracts a relevant portion of the program code related to a specific variable or computation. It helps isolate and analyze specific parts of the code, making it easier to understand and debug.",
            "question": "What is program slicing, and how can it be useful in software testing?"
        },
        {
            "answer": "Abstract interpretation is a technique that approximates the behavior of a program by using abstract values instead of concrete values. It helps identify potential errors and understand the program's overall behavior.",
            "question": "Explain abstract interpretation and its application in software testing."
        }
    ],
    "keywords": [
        {
            "definition": "A technique that involves executing the system with inputs that are symbolic representations (variables) rather than concrete values. It helps analyze the program's behavior for different input combinations and identify potential issues.",
            "term": "Symbolic execution"
        },
        {
            "definition": "A type of testing that involves executing the system with concrete values to observe its behavior and identify defects. It is the most commonly used V&V technique.",
            "term": "Verification testing"
        },
        {
            "definition": "The process of evaluating a system or component to determine whether it meets the specified requirements. It focuses on ensuring the system fulfills its intended purpose and meets user needs.",
            "term": "Validation"
        },
        {
            "definition": "A technique that involves examining the system's code or design without executing it. It aims to identify potential defects by analyzing the structure, logic, and consistency of the system.",
            "term": "Static techniques"
        },
        {
            "definition": "A technique that involves systematically verifying software artifacts, such as code, requirements, or diagrams, to identify defects as early as possible. It is typically performed by a group of team members.",
            "term": "Inspection"
        },
        {
            "definition": "A technique that involves creating a simplified model of the system, such as a finite state machine or Petri net, and then exhaustively checking whether the model meets a given specification. It is useful for verifying properties like reachability, deadlock, and termination.",
            "term": "Model checking"
        },
        {
            "definition": "A technique that involves identifying and discarding statements in a program that are irrelevant to the computation of a particular variable at a specific point. It helps simplify the program and focus on the relevant parts for analysis.",
            "term": "Program slicing"
        },
        {
            "definition": "A technique that involves analyzing the program's semantics by making a sound approximation of its behavior. It aims to identify potential issues by considering the program's execution traces within certain bounds.",
            "term": "Abstract interpretation"
        },
        {
            "definition": "The process of evaluating a system or component to determine whether it adheres to predefined properties or specifications. It focuses on ensuring the system is built correctly and meets internal consistency requirements.",
            "term": "Verification"
        },
        {
            "definition": "A type of testing that involves executing the system with concrete values to observe its behavior and identify defects. It is the most commonly used V&V technique.",
            "term": "Testing"
        },
        {
            "definition": "A type of testing that involves executing the system with concrete values to observe its behavior and identify defects. It is the most commonly used V&V technique.",
            "term": "Dynamic techniques"
        }
    ],
    "practice": {
        "long": [
            {
                "answer": "Testing is a crucial aspect of software development, aiming to ensure the software meets its intended purpose and functions correctly. It involves executing the software under various conditions to identify and rectify defects, ultimately enhancing the software's quality and reliability. Testing is essential for delivering a robust and dependable software product that meets user expectations and performs as designed.",
                "question": "Discuss the importance of testing in software development. Explain its role in ensuring software quality and reliability."
            },
            {
                "answer": "Verification focuses on ensuring the software is built correctly, adhering to specifications and internal consistency. It involves static testing methods like reviews, inspections, and walkthroughs, which do not involve executing the code. Validation, on the other hand, aims to ensure the software meets user needs and intended use. It involves dynamic testing methods like unit testing, integration testing, and system testing, which involve running the code and evaluating its behavior against requirements.",
                "question": "Explain the difference between software verification and validation. Provide examples of testing techniques used for each."
            }
        ],
        "multiple": [
            {
                "answer": "Dynamic Testing",
                "explanation": "Dynamic testing involves executing the code and observing its behavior, which is essential for identifying runtime errors and verifying functionality.",
                "options": [
                    "Static Testing",
                    "Dynamic Testing",
                    "Code Inspection",
                    "Requirement Analysis"
                ],
                "question": "Which type of testing involves executing the code to identify runtime errors and verify functionality?"
            },
            {
                "answer": "Symbolic execution",
                "explanation": "Symbolic execution involves using symbolic values instead of concrete values to analyze the program's behavior, allowing for a more comprehensive understanding of its logic and potential errors.",
                "options": [
                    "Model checking",
                    "Program slicing",
                    "Symbolic execution",
                    "Abstract interpretation"
                ],
                "question": "Which V&V technique uses symbolic values instead of concrete values to analyze program behavior?"
            },
            {
                "answer": "It can identify potential deadlocks and unreachable states.",
                "explanation": "Model checking uses formal models to exhaustively analyze the system's behavior, enabling the detection of potential deadlocks and unreachable states, which can indicate design flaws or unexpected behavior.",
                "options": [
                    "It can identify potential deadlocks and unreachable states.",
                    "It can be used to optimize code performance.",
                    "It is primarily used for testing user interfaces.",
                    "It is only applicable to small-scale systems."
                ],
                "question": "What is a significant advantage of using model checking in software verification?"
            },
            {
                "answer": "To ensure the software meets the user's needs and intended use.",
                "explanation": "Validation focuses on ensuring the software meets the user's expectations and fulfills its intended purpose, which is crucial for delivering a successful and usable product.",
                "options": [
                    "To ensure the software is built correctly.",
                    "To identify potential security vulnerabilities.",
                    "To ensure the software is efficient and performs well.",
                    "To ensure the software meets the user's needs and intended use."
                ],
                "question": "What is the primary goal of software validation?"
            },
            {
                "answer": "It is a sound approximation of the program's semantics.",
                "explanation": "Abstract interpretation involves creating a sound approximation of the program's behavior, allowing for the analysis of its properties without executing the entire code, which is particularly useful for large and complex systems.",
                "options": [
                    "It is a technique for identifying memory leaks.",
                    "It is a method for optimizing code performance.",
                    "It is a sound approximation of the program's semantics.",
                    "It is a technique for generating test cases automatically."
                ],
                "question": "What is a key characteristic of abstract interpretation in software verification?"
            }
        ],
        "short": [
            {
                "answer": "Testing is crucial for identifying and rectifying defects in software, ensuring its quality and reliability. It helps to uncover potential issues before deployment, reducing the risk of costly errors and improving user satisfaction.",
                "question": "Why is testing an essential part of software development?"
            },
            {
                "answer": "Program slicing involves identifying and extracting a subset of the program's code that is relevant to a specific variable or computation. This technique helps to isolate and analyze specific parts of the code, simplifying debugging and understanding the program's behavior.",
                "question": "Explain the concept of program slicing in software verification."
            },
            {
                "answer": "Model checking uses formal models to exhaustively analyze the system's behavior, verifying whether it meets specified properties. This technique is particularly useful for detecting potential deadlocks, unreachable states, and other design flaws that can lead to unexpected behavior.",
                "question": "Describe the purpose of model checking in software verification."
            }
        ]
    }
}